package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.77

import (
	"bughub/graph/model"
	"context"
	"log"
	"time"

	"github.com/google/uuid"
	"go.mongodb.org/mongo-driver/bson"
)

// CreateReport is the resolver for the createReport field.
func (r *mutationResolver) CreateReport(ctx context.Context, input model.NewReport) (*model.Report, error) {
	report := &model.Report{
		ID:          uuid.NewString(),
		Title:       input.Title,
		Description: input.Description,
		CreatedAt:   time.Now().Format(time.RFC3339),
	}

	_, err := r.Mongo.InsertOne(ctx, report)
	if err != nil {
		return nil, err
	}
	return report, nil
}

// Reports is the resolver for the reports field.
func (r *queryResolver) Reports(ctx context.Context) ([]*model.Report, error) {
	cursor, err := r.Mongo.Find(ctx, bson.M{})
	if err != nil {
		log.Printf("could not find reports: %v", err)
		return nil, err
	}
	defer cursor.Close(ctx)

	var reports []*model.Report
	for cursor.Next(ctx) {
		var doc bson.M

		if err := cursor.Decode(&doc); err != nil {
			log.Printf("error decoding report: %v", err)
			return nil, err
		}

		idVal, ok := doc["_id"].(string)
		if !ok {
			log.Printf("warning: _id is not a string: %v", doc["_id"])
			continue
		}

		titleVal, ok := doc["title"].(string)
		if !ok {
			log.Printf("title is not a string or is missing: %v", doc["title"])
			titleVal = ""
		}

		descVal, ok := doc["description"].(string)
		if !ok {
			log.Printf("description is not a string or is missing: %v", doc["description"])
			descVal = ""
		}

		reports = append(reports, &model.Report{
			ID:          idVal,
			Title:       titleVal,
			Description: descVal,
			CreatedAt:   time.Now().Format(time.RFC3339),
		})
	}
	return reports, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) SubmitReport(ctx context.Context, title string, description string) (*model.Report, error) {
	panic(fmt.Errorf("not implemented: SubmitReport - submitReport"))
}
*/
